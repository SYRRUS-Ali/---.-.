#include <iostream>
#include <vector>
#include <deque>
#include <climits>

using namespace std;

using Graph = vector<vector<int>>;

int findShortestPath(const Graph& graph, int startVertex, int endVertex) {
    if (startVertex == endVertex) {
        return 0;
    }

    int n = graph.size();
    vector<int> distance(n, INT_MAX); // Initialize distances to infinity
    deque<int> deque;

    distance[startVertex] = 0;
    deque.push_back(startVertex);

    while (!deque.empty()) {
        int current = deque.front();
        deque.pop_front();

        for (int neighbor : graph[current]) {
            if (distance[current] + 1 < distance[neighbor]) {
                distance[neighbor] = distance[current] + 1;
                deque.push_back(neighbor);
            }
        }
    }

    return (distance[endVertex] == INT_MAX) ? -1 : distance[endVertex];
}

int main() {
    Graph graph = {
        {1, 2},
        {0, 3, 4},
        {0, 4},
        {1, 5},
        {1, 2, 5},
        {3, 4}
    };

    int startVertex = 0;
    int endVertex = 5;

    int shortestDistance = findShortestPath(graph, startVertex, endVertex);

    if (shortestDistance != -1) {
        cout << "The shortest distance from vertex " << startVertex << " to vertex " << endVertex << " is " << shortestDistance << ".\n";
    }
    else {
        cout << "There is no path between vertex " << startVertex << " and vertex " << endVertex << ".\n";
    }

    return 0;
}
