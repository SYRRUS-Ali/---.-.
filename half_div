#include <vector>
#include <numeric>
#include <algorithm>
#include <iostream>
 
using namespace std; 

pair<int, int> halfDivide(const vector<int>& numbers) {
    size_t mid = numbers.size() / 2;
    int sumFirstHalf = accumulate(numbers.begin(), numbers.begin() + mid, 0);
    int sumSecondHalf = accumulate(numbers.begin() + mid, numbers.end(), 0);
    return { sumFirstHalf, sumSecondHalf };
}

pair<int, int> halfProduct(const vector<int>& numbers) {
    size_t mid = numbers.size() / 2;
    int productFirstHalf = accumulate(numbers.begin(), numbers.begin() + mid, 1, multiplies<int>());
    int productSecondHalf = accumulate(numbers.begin() + mid, numbers.end(), 1, multiplies<int>());
    return { productFirstHalf, productSecondHalf };
    }
    int main() {

        vector<int> numbers = { 1, 2, 3, 4, 5, 6 };

        auto sumResult = halfDivide(numbers);
        cout << "Sum of first half: " << sumResult.first << ", second half: " << sumResult.second << endl;

        auto productResult = halfProduct(numbers);
        cout << "Product of first half: " << productResult.first << ", second half: " << productResult.second << endl;

        return 0;
    }

